
"""
WildType Aligner Utility Functions
Generated by Priority 1 fixes
"""

import sys
import os
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from src.simplified_wildtype_aligner import SimplifiedWildTypeAligner, SimpleAlignerConfig
    MODULES_AVAILABLE = True
except ImportError:
    try:
        from simplified_wildtype_aligner import SimplifiedWildTypeAligner, SimpleAlignerConfig
        MODULES_AVAILABLE = True
    except ImportError:
        print("WARNING: SimplifiedWildTypeAligner modules not available")
        MODULES_AVAILABLE = False
        
        # Create mock classes for testing structure
        class SimpleAlignerConfig:
            def __init__(self, input_dir=None, output_dir=None, target_genes=None, reference_dir=None):
                self.input_dir = input_dir
                self.output_dir = output_dir
                self.target_genes = target_genes or []
                self.reference_dir = reference_dir
        
        class SimplifiedWildTypeAligner:
            def __init__(self, config):
                self.config = config

def create_safe_aligner(output_dir_or_config, target_genes=None, input_dir=None):
    """
    Create SimplifiedWildTypeAligner with automatic parameter handling
    Handles both string (legacy) and SimpleAlignerConfig parameters
    """
    if not MODULES_AVAILABLE:
        print("WARNING: Creating mock aligner - modules not available")
    
    if isinstance(output_dir_or_config, str):
        # Legacy string parameter - convert to config
        config = SimpleAlignerConfig(
            input_dir=input_dir or "input",
            output_dir=output_dir_or_config,
            target_genes=target_genes or ["generic_gene"],
            reference_dir=None
        )
    elif hasattr(output_dir_or_config, 'output_dir'):
        # Already a config object
        config = output_dir_or_config
    else:
        raise ValueError(f"Invalid parameter type: {type(output_dir_or_config)}")
    
    return SimplifiedWildTypeAligner(config)

def test_aligner_creation():
    """Test the aligner creation wrapper"""
    import tempfile
    
    print("Testing SimplifiedWildTypeAligner constructor wrapper...")
    
    # Test string parameter
    with tempfile.TemporaryDirectory() as temp_dir:
        try:
            aligner1 = create_safe_aligner(temp_dir)
            print(f"✓ Created aligner with string parameter: {temp_dir}")
        except Exception as e:
            print(f"✗ String parameter test failed: {e}")
            return False
        
        # Test config parameter
        try:
            config = SimpleAlignerConfig(
                input_dir="test_input",
                output_dir=temp_dir,
                target_genes=["test_gene"],
                reference_dir=None
            )
            aligner2 = create_safe_aligner(config)
            print(f"✓ Created aligner with config parameter")
        except Exception as e:
            print(f"✗ Config parameter test failed: {e}")
            return False
        
        print("✓ All aligner wrapper tests passed!")
        return True

if __name__ == "__main__":
    print("WildType Aligner Utility - Testing")
    print("=" * 40)
    test_aligner_creation()
